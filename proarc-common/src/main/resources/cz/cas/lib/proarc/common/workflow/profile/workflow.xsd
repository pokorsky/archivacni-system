<?xml version="1.0" standalone="yes"?>
<!--
Copyright (C) 2015 Jan Pokorsky

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
-->

<xs:schema elementFormDefault="qualified" version="1.0"
           targetNamespace="http://proarc.lib.cas.cz/xml/common/workflow/v1"
           xmlns:tns="http://proarc.lib.cas.cz/xml/common/workflow/v1"
           xmlns:xs="http://www.w3.org/2001/XMLSchema">

    <!-- root element -->
    <xs:element name="workflow" type="tns:workflowDefinition"/>

    <xs:complexType name="workflowDefinition">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="version" type="tns:i18NString" minOccurs="0" maxOccurs="1"/>
            <xs:element name="job" type="tns:jobDefinition"/>
            <xs:element name="material" type="tns:materialDefinition"/>
            <xs:element name="task" type="tns:taskDefinition"/>
            <xs:element name="valuemap" type="tns:valueMapDefinition"/>
        </xs:choice>
    </xs:complexType>

    <!-- job profile -->
    <xs:complexType name="jobDefinition">
        <xs:sequence>
            <xs:element name="worker" type="tns:workerDefinition" minOccurs="0" />
            <xs:element name="model" type="tns:modelDefinition" minOccurs="0" maxOccurs="unbounded" />
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <!--
                The name reference to a job that can be added as a subjob of this job.
                -->
                <xs:element name="subjob" type="tns:subjobDefinition"/>
                <xs:element name="step" type="tns:stepDefinition"/>
                <xs:element name="hint" type="tns:i18NString"/>
                <xs:element name="title" type="tns:i18NString"/>
            </xs:choice>
        </xs:sequence>
        <xs:attribute name="disabled" type="xs:boolean"/>
        <xs:attribute name="name" type="xs:ID" use="required"/>
        <xs:attribute name="priority" type="xs:int" default="2"/>
    </xs:complexType>

    <!--
    Defines a dependency on another job.
    -->
    <xs:complexType name="subjobDefinition">
        <xs:attribute name="jobRef" type="xs:IDREF" use="required"/>
    </xs:complexType>

    <xs:complexType name="stepDefinition">
        <xs:sequence>
            <xs:element name="worker" type="tns:workerDefinition" minOccurs="0"/>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element name="setParam" type="tns:setParamDefinition"/>
                <xs:element name="blocker" type="tns:blockerDefinition"/>
                <xs:element name="mainBlocker" type="tns:mainBlockerDefinition"/>
            </xs:choice>
        </xs:sequence>
        <xs:attribute name="taskRef" type="xs:IDREF" use="required"/>
        <!--
        The optional step is not created automatically with new job,
        but it can be added later by user.
        -->
        <xs:attribute name="optional" type="xs:boolean" default="false"/>
    </xs:complexType>

    <!--
    Defines a dependency on all steps of a given task.
    -->
    <xs:complexType name="blockerDefinition">
        <xs:attribute name="taskRef" type="xs:IDREF" use="required"/>
    </xs:complexType>

    <xs:complexType name="mainBlockerDefinition">
        <xs:attribute name="blockAllBefore" type="xs:boolean" use="required"/>
    </xs:complexType>

    <!-- task profile -->
    <xs:complexType name="taskDefinition">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="setMaterial" type="tns:setMaterialDefinition"/>
            <xs:element name="param" type="tns:paramDefinition"/>
            <xs:element name="hint" type="tns:i18NString"/>
            <xs:element name="title" type="tns:i18NString"/>
            <xs:element name="action" type="tns:actionDefinition" />
        </xs:choice>
        <xs:attribute name="name" type="xs:ID" use="required"/>
        <xs:attribute name="disabled" type="xs:boolean"/>
    </xs:complexType>

    <xs:complexType name="setMaterialDefinition">
        <xs:attribute name="materialRef" type="xs:IDREF" use="required"/>
        <!--The way how is the material used.-->
        <xs:attribute name="way" type="tns:materialWayType" use="required"/>
    </xs:complexType>

    <xs:simpleType name="materialWayType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="INPUT"/>
            <xs:enumeration value="OUTPUT"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- material profile -->
    <xs:complexType name="materialDefinition">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="hint" type="tns:i18NString"/>
            <xs:element name="title" type="tns:i18NString"/>
        </xs:choice>
        <xs:attribute name="name" type="xs:ID" use="required"/>
        <xs:attribute name="type" type="tns:materialType" use="required"/>
        <xs:attribute name="disabled" type="xs:boolean"/>
    </xs:complexType>

    <xs:simpleType name="materialType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="DIGITAL_OBJECT"/>
            <xs:enumeration value="FOLDER"/>
            <xs:enumeration value="PHYSICAL_DOCUMENT"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="workerDefinition">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="actual" type="xs:boolean" default="false"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <!-- these models (defined by PID of model) can be created; optional (in case empty list is not possible to create a new object)   -->
    <xs:complexType name="modelDefinition">
        <xs:attribute name="pid" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="i18NString">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="lang" type="xs:string"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <!-- parameter profiles -->
    <xs:complexType name="paramDefinition">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="hint" type="tns:i18NString"/>
            <xs:element name="title" type="tns:i18NString"/>
        </xs:choice>
        <xs:attribute name="name" type="xs:ID" use="required"/>
        <xs:attribute name="disabled" type="xs:boolean"/>
        <xs:attribute name="required" type="xs:boolean"/>
        <xs:attribute name="datasource" type="xs:IDREF"/>
        <!--
        A data source field name that will be used as value for a given selection.
        Do not set for internal value maps.
        -->
        <xs:attribute name="optionValueField" type="xs:string"/>
        <!--
        A data source field name that will be used to present options.
        Do not set for internal value maps.
        -->
        <xs:attribute name="optionDisplayField" type="xs:string"/>
        <!--the param value type-->
        <xs:attribute name="type" type="tns:valueTypeDefinition" default="STRING"/>
        <!--specifies how to display the param value-->
        <xs:attribute name="displayType" type="tns:displayTypeDefinition" default="TEXT"/>
    </xs:complexType>

    <xs:complexType name="actionDefinition">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="arg" type="tns:actionArgTypeDefinition" />
        </xs:choice>
        <xs:attribute name="command" type="xs:string" />
    </xs:complexType>

    <xs:simpleType name="actionArgTypeDefinition">
        <xs:restriction base="xs:string">
            <xs:enumeration value="path"/>
            <xs:enumeration value="pid"/>
            <xs:enumeration value="barcode"/>
            <xs:enumeration value="source"/>
            <xs:enumeration value="field001"/>
            <xs:enumeration value="metadata"/>
            <xs:enumeration value="sigla"/>
            <xs:enumeration value="signature"/>
            <xs:enumeration value="rdczId"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="valueTypeDefinition">
        <xs:restriction base="xs:string">
            <xs:enumeration value="DATETIME"/>
            <xs:enumeration value="NUMBER"/>
            <xs:enumeration value="STRING"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="displayTypeDefinition">
        <xs:restriction base="xs:string">
            <xs:enumeration value="CHECKBOX"/>
            <xs:enumeration value="COMBOBOX"/>
            <xs:enumeration value="DATETIME"/>
            <xs:enumeration value="SELECT"/>
            <xs:enumeration value="TEXT"/>
            <xs:enumeration value="TEXTAREA"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="setParamDefinition">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="paramRef" type="xs:IDREF" use="required"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="valueMapDefinition">
        <xs:sequence>
            <xs:element name="value" type="tns:valueMapItemDefinition" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:ID" use="required"/>
        <xs:attribute name="source" type="tns:valueMapSourceType" default="INTERNAL" />
    </xs:complexType>

    <xs:simpleType name="valueMapSourceType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="INTERNAL"/>
            <xs:enumeration value="PROARC"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="valueMapItemDefinition">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="key" type="xs:string"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

</xs:schema>
